# 4월 21일 1
# 수업 1, 2, 지난시간 못다한 git 사용방법, 마크다운 사용방법.
# 수업 3 --------------------------------------------------------------------------


# tuple(튜플)형
# 튜플은 element의 값을 수정 할 수 없다.
# 튜플은 소괄호() 로 표시함.
# mutable(변하는, 수정 가능한) : 리스트(list), 딕셔너리(dict)
# ***immutable(불변하는, 변하지 않는)*** : 튜플(tuple), 정수(int), 실수(float), 문자열(str)
# 튜플과 리스트 차이점 예시))
print("리스트형 예시") 
"""my_list=[1,2,3]
my_list[0] = 5 
print(my_list)"""
print("\n")

print("튜플형 예시")   # 오류남. 튜플형은 수정 불가능
"""my_tuple = (1,2,3)
my_tuple[0] = 5
print(my_tuple)"""
print("\n")

# 고로 수정을 하면 안되는 데이터를 튜플형식으로 만들어 놓으면 좋다.
# 삭제, 변경, 수정 모두 안됨.
# 다음 형식 모두 가능. 리스트와 사용방식은 동일.
# 연산자 사용 가능
# 값을 수정하는게 아니고 새 데이터를 만들어내는 개념이기때문에 가능.

print("튜플형 실습하기 1") 
"""tuple_1=("Hello", "World", "Python")
t2 = (1,2,3,4,5)
t3 = (1,2, "Hello")
t4 = 1,2,3
t5 = (1,2, (3,4,5))
t6 = tuple_1 + t2
"""
# 그럼 이런 방식은 가능한가? :
"""t7 = t3 * 3
t7 = t3 * 4 """      #  -> 가능함. 왜? 데이터를 바꾼게 아니라 데이터가 있는 자리를 알려주는 화살표 방향을 바꾼것. 
# 인덱싱, 슬라이싱 가능
"""print(t3[2])     # 2번 인덱스 꺼내오기
print(t3[0:2])   # 슬라이싱해서 가져오기   
print(len(t3))   # t3의 길이 구하기
t5[2][1]"""  #  -> 2번째 인덱스 안의 1번쨰 인덱스 가져오기.
# cf>>
## 슬라이싱의 특징 : 원래 데이터가 가지고있던 성질을 그대로 가져옴.
## 문자열을 슬라이싱 -> 슬라이싱된 부분 : 문자열데이터
## 리스트를 슬라이싱 -> 슬라이싱된 부분 : 리스트형 데이터
## 튜플을 슬라이싱 -> 슬라이싱된 부분 : 튜플형 데이터 -->> 고로 슬라이시이 한 부분도 튜플이 되어 수정 불가.

"""t8=(5,3,1,4,2)"""    # -> 이걸 오름차순으로 정리하고 싶어도 정렬 불가. 왜? 값이 바뀌니까

# for 문 사용 가능
# for i in t8:
#     print(i)   # 순서가 중요한 데이터라 순서대로 꺼낸다.
# print("\n")






# 수업 4 --------------------------------------------------------------------------

##       <<      실      습      >>
# 문)) 2 ~ 9 사이의 숫자를 입력받아 해당하는 단의 구구단을 출력하기.
# 2~ 9 사이의 숫자가 아닌 값이 입력된 경우, 잘못입력되었다고 출력하고 다시 입력받기
print("실습하기 1 - 나의 풀이") 
"""a = int(input("단 수:"))
if 2<= a < 10 :
    for i in range(1,10):
        print(a,"*",i, "=", a*i)
else:
    print("잘못 입력하셨습니다.")"""
print("\n")

### 실습 답
print("실습하기 1 - 해설") 
# if n < 2 or n > 10:    #-> 2~9 사이의 값이 아닐때 True
# 또는 if 2 <= n <= 9 (파이썬에서는 가능한 문법)  or     n>=2 and n<=9(보통의경우)         # -> 2~9 사이의 값일때 True
# n = int(input("몇 단?:"))
# while not 2 <= n <= 9:
#     print("2와 9 사이의 숫자를 입력해주세요.")
#     n = int(input("몇 단?:"))
# for i in range(1,10):                       # 또는 range(9) : 이거는 안쪽 코드를 다르게 짜면 된다.
#     print(n, "*", i, "=", n*i)              # range(9)로 했을 경우 i를 (i+1) 로 바꾸면 됨.








# 수업 5 --------------------------------------------------------------------------

##       <<      실      습      >>
# 문)) 정수를 입력받고, 그 정수보다 작은 수 중 가장 큰 제곱수를 가진 수를 출력하세요.
#      정수는 2 이상이다.
# 10 입력받은 10 보다 작은 수 중 가장 큰 제곱수 
# 9,8,7,6,5,4,3,2,1
# 81,64,49,25,16,9,4,1
print("실습하기 2 - 나의 풀이")
# a = int(input("정수를 입력하세요:"))
# b = range(a)
# 조건 a > b*b
print("\n")

### 실습 풀이
print("실습하기 2 - 해설")
'''n = int(input("정수 :"))
i = 1'''
# 제곱 시켜라 -> i*i or i**2
'''while True:
    if i**2 >= n:
        break
    answer = i**2
    i += 1
print(answer)'''
print("\n")





# 수업 6 --------------------------------------------------------------------------

##       <<      실      습      >>
# [1, 2, 3, 4, 5]
# [10, 20, 30, 40, 50]
# [532, 5941, 54682, 58, 5]
# 3개의 리스트에서 같은 인덱스의 값끼리 더하여 출력하기
print("실습하기 2 - 나의 풀이1")
# li1 = [1, 2, 3, 4, 5]
# li2 = [10, 20, 30, 40, 50]
# li3 = [532, 5941, 54682, 58, 5]

# print(li1[0]+li2[0]+li3[0])
# print(li1[1]+li2[1]+li3[1])
# print(li1[2]+li2[2]+li3[2])
# print(li1[3]+li2[3]+li3[3])
# print(li1[4]+li2[4]+li3[4])
print("\n")
# 인덱스에 1씩 더해서 반복문 돌리면 될꺼같은데... 어떻게 짜지??


print("실습하기 2 - 해설")
li_1 = [1, 2, 3, 4, 5]
li_2 = [10, 20, 30, 40, 50]
li_3 = [532, 5941, 54682, 58, 5]
for i in range(5):
    print(li_1[i]+ li_2[i]+li_3[i])
print("\n")


print("실습하기 3 - 해설")
li_1 = [1, 2, 3, 4, 5]
li_2 = [10, 20, 30, 40, 50]
li_3 = [532, 5941, 54682, 58, 5]
i = 0
while i < 5:
    print(li_1[i]+ li_2[i]+li_3[i])
    i += 1
print("\n")






# zip()
# 길이가 같은 list를 묶어서  for문 등으로 사용 가능한 iterable을 반환한다.
# li_1 = [1, 2, 3, 4, 5]
# li_2 = [10, 20, 30, 40, 50]
# li_3 = [532, 5941, 54682, 58, 5]
# --->> zip(li_1, li_2, li_3)
# 고로 다음과 같은 식이 가능하다
# for x,y,z in zip(li_1, li_2, li_3):
#   print(x+y+z)                    # --->> 결과 : [[1,10,531],[2,20,5941]....]
#




##       <<      실      습      >>
# 정수를 입력받고 1부터 입력받은 정수까지 모두 출력하기.
# 단, 숫자에 3,6,9가 들어있는 경우, 숫자 대신 '짝' 이라고 출력하기.
print("실습하기 3 - 나의 풀이")
# a = int(input("정수 입력:"))
# for i in range(a+1):
#     if 
#         print("짝")
#     else:
#         print(i)
print("\n")






# 수업 7 --------------------------------------------------------------------------
###       <<      실      습      >> ++++++++++++++++++++++++++++ 어려움. 나중에 확인해서 이해해보기 ++++++++++++++++++++++++++++++++++++++++
# 정수를 입력받고 1부터 입력받은 정수까지 모두 출력하기.
# 단, 숫자에 3,6,9가 들어있는 경우, 숫자 대신 '짝' 이라고 출력하기.

### 해설
# "3", "6", "9"
# 100의자리에서 "9"만 찾는 방법 -> 931//100
# 10의자리에서 "3"만 가져오려면 -> 31//10 = (931 % 100) // 10
print("실습하기 3 - 해설")
# n = int(input("정수:"))
# for i in range(1, n+1):
#     answer = i
#     # 3,6,9가 들어있으면
#     for j in str(i) :                         # 931 --> "931" 로 문자열로 바꾼거. for문 사용하기 위해.
#         if int(j) % 3 == 0 and j != "0":      # 하나씩 꺼내서 그 자리수가 3의 배수인지 확인. 9는 3의배수, 6은 3의배수, 1은 배수 아님.
#             answer = "짝"                     # '!='  의 뜻 : 같지 않다.
#             break
#     print(answer)
print("\n")





###       <<      실      습      >>
# 정수를 입력 받고 그 정수의 약수를 모두 출력하기.
# 약수 : 나누었을때 나머지가 0으로 떨어지게 하는 수 ex) 2는 4의 약수, 2는 6의 약수....
print("실습하기 3 - 나의 풀이")
# a = int(input("정수 입력:"))
# for i in range(a+1):
#     if a % i == 0:
#         print(i)
#     else :
#         pass
print("\n")

### 해설
print("실습하기 3 - 해설1: for")
n = int(input("정수:"))
for i in range(1, n+1):   # 1 ~ n
    if n % i == 0:
        print(i)
print("\n")

print("실습하기 3 - 해설2: while")
n = int(input("정수:"))
i = 1
while i <= n:
    if n % i == 0:
        print(i)
    i += 1
print("\n")
